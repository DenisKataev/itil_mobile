// + Appeals
Функция get_appeals_GET(Запрос)
	Token=Запрос.Заголовки.Получить("token");
	Action="base";
	СвязьСЛ=БР_ОбменСерверЛицензирования.ПолученияДанныхСЛ(Token,Action);
	Если СвязьСЛ=Истина Тогда
		ЮниксДата =  МестноеВремя(Дата(1970,1,1,0,0,0) + Число(Запрос.ПараметрыЗапроса.Получить("dateTo")),ПолучитьЧасовойПоясИнформационнойБазы());
		Лимит = Запрос.ПараметрыЗапроса.Получить("limit");	
		ПарамСортировкаДаты = Запрос.ПараметрыЗапроса.Получить("dateSorting");
		СортировкаДаты = "";
		Знак = ">";
		Если ПарамСортировкаДаты = "desc" Тогда 
			СортировкаДаты = " УБЫВ";
			Знак = "<";
		КонецЕсли;
		СтрокаJSON = ПолучитьJSONОбращений(
		Дата(ЮниксДата),
		Лимит,
		СортировкаДаты,
		Знак
		);                         	
		Ответ = Новый HTTPСервисОтвет(200);	
		Ответ.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);
		Возврат Ответ;
	Иначе
		Возврат БР_ОбменСерверЛицензирования.Ответ(СвязьСЛ);
	КонецЕсли;
КонецФункции

Функция ПолучитьJSONОбращений(ДатаПо, Лимит, СортировкаДаты, Знак)
	МассивНомеровПодтверждений = ПолучитьСписокПотверждений();
	МассивНомеровСогласований = ПолучитьСписокСогласований(); 
	ЗапросКБазе=Новый Запрос;
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(Лимит) +	 Символы.ПС +
		"	Процессы.Наименование КАК Наименование,
		|	Процессы.Номер КАК Номер,
		|	Процессы.Инициатор КАК Инициатор,
		|	Процессы.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	Процессы.Услуга КАК Услуга,
		|	ВЫБОР
		|		КОГДА Процессы.Актив ССЫЛКА Справочник.itilprofАктивы
		|			ТОГДА Процессы.Актив.КонфигурационнаяЕдиница
		|		ИНАЧЕ Процессы.Актив
		|	КОНЕЦ КАК Актив,
		|	Процессы.ПроцессУправления КАК ПроцессУправления,
		|	Процессы.Статус КАК Статус,
		|	Процессы.Ссылка.ДатаСоздания КАК Дата,
		|	Процессы.Ссылка КАК Ссылка,
		|	Процессы.ТекущийЭтап КАК ТекущийЭтап,
		|	Процессы.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|	Процессы.Описание КАК Описание
		|ИЗ
		|	(ВЫБРАТЬ
		|		itilprofЗапросы.Наименование КАК Наименование,
		|		itilprofЗапросы.Ссылка КАК Ссылка,
		|		itilprofЗапросы.Номер КАК Номер,
		|		itilprofЗапросы.Инициатор КАК Инициатор,
		|		itilprofЗапросы.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|		itilprofЗапросы.Услуга КАК Услуга,
		|		itilprofЗапросы.Актив КАК Актив,
		|		itilprofЗапросы.ПроцессУправления КАК ПроцессУправления,
		|		itilprofЗапросы.Статус КАК Статус,
		|		itilprofЗапросы.ОценкаПроцесса КАК ОценкаПроцесса,
		|		itilprofЗапросы.ТекущийЭтап КАК ТекущийЭтап,
		|		itilprofЗапросы.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilprofЗапросы.Описание КАК Описание
		|	ИЗ
		|		Документ.itilprofЗапросы КАК itilprofЗапросы
		|	ГДЕ
		|		itilprofЗапросы.ПометкаУдаления = ЛОЖЬ
		|		И itilprofЗапросы.ДатаСоздания " + Знак + " &ДатаОкончания	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		itilprofЗапросыНаИзменения.Наименование,
		|		itilprofЗапросыНаИзменения.Ссылка,
		|		itilprofЗапросыНаИзменения.Номер,
		|		itilprofЗапросыНаИзменения.Инициатор,
		|		itilprofЗапросыНаИзменения.ТекущийИсполнитель,
		|		itilprofЗапросыНаИзменения.Услуга,
		|		itilprofЗапросыНаИзменения.Актив,
		|		itilprofЗапросыНаИзменения.ПроцессУправления,
		|		itilprofЗапросыНаИзменения.Статус,
		|		itilprofЗапросыНаИзменения.ОценкаПроцесса,
		|		itilprofЗапросыНаИзменения.ТекущийЭтап,
		|		itilprofЗапросыНаИзменения.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilprofЗапросыНаИзменения.Описание КАК Описание
		|	ИЗ
		|		Документ.itilprofЗапросыНаИзменения КАК itilprofЗапросыНаИзменения
		|	ГДЕ
		|		itilprofЗапросыНаИзменения.ПометкаУдаления = ЛОЖЬ
		|		И itilprofЗапросыНаИзменения.ДатаСоздания " + Знак + " &ДатаОкончания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		itilprofИнциденты.Наименование,
		|		itilprofИнциденты.Ссылка,
		|		itilprofИнциденты.Номер,
		|		itilprofИнциденты.Инициатор,
		|		itilprofИнциденты.ТекущийИсполнитель,
		|		itilprofИнциденты.Услуга,
		|		itilprofИнциденты.Актив,
		|		itilprofИнциденты.ПроцессУправления,
		|		itilprofИнциденты.Статус,
		|		itilprofИнциденты.ОценкаПроцесса,
		|		itilprofИнциденты.ТекущийЭтап,
		|		itilprofИнциденты.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilprofИнциденты.Описание КАК Описание
		|	ИЗ
		|		Документ.itilprofИнциденты КАК itilprofИнциденты
		|	ГДЕ
		|		itilprofИнциденты.ПометкаУдаления = ЛОЖЬ
		|		И itilprofИнциденты.ДатаСоздания " + Знак + " &ДатаОкончания	          	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		itilprofПроблемы.Наименование,
		|		itilprofПроблемы.Ссылка,
		|		itilprofПроблемы.Номер,
		|		itilprofПроблемы.Инициатор,
		|		itilprofПроблемы.ТекущийИсполнитель,
		|		itilprofПроблемы.Услуга,
		|		itilprofПроблемы.Актив,
		|		itilprofПроблемы.ПроцессУправления,
		|		itilprofПроблемы.Статус,
		|		itilprofПроблемы.ОценкаПроцесса,
		|		itilprofПроблемы.ТекущийЭтап,
		|		itilprofПроблемы.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilprofПроблемы.Описание КАК Описание
		|	ИЗ
		|		Документ.itilprofПроблемы КАК itilprofПроблемы
		|	ГДЕ
		|		itilprofПроблемы.ПометкаУдаления = ЛОЖЬ
		|		И itilprofПроблемы.ДатаСоздания " + Знак + " &ДатаОкончания			  	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		itilcorpЗапросыНаДоступ.Наименование,
		|		itilcorpЗапросыНаДоступ.Ссылка,
		|		itilcorpЗапросыНаДоступ.Номер,
		|		itilcorpЗапросыНаДоступ.Инициатор,
		|		itilcorpЗапросыНаДоступ.ТекущийИсполнитель,
		|		itilcorpЗапросыНаДоступ.Услуга,
		|		itilcorpЗапросыНаДоступ.Актив,
		|		itilcorpЗапросыНаДоступ.ПроцессУправления,
		|		itilcorpЗапросыНаДоступ.Статус,
		|		itilcorpЗапросыНаДоступ.ОценкаПроцесса,
		|		itilcorpЗапросыНаДоступ.ТекущийЭтап,
		|		itilcorpЗапросыНаДоступ.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilcorpЗапросыНаДоступ.Описание КАК Описание
		|	ИЗ
		|		Документ.itilcorpЗапросыНаДоступ КАК itilcorpЗапросыНаДоступ
		|	ГДЕ
		|		itilcorpЗапросыНаДоступ.ПометкаУдаления = ЛОЖЬ
		|		И itilcorpЗапросыНаДоступ.ДатаСоздания " + Знак + " &ДатаОкончания			  	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		itilprofРелизы.Наименование,
		|		itilprofРелизы.Ссылка,
		|		itilprofРелизы.Номер,
		|		itilprofРелизы.Инициатор,
		|		itilprofРелизы.ТекущийИсполнитель,
		|		itilprofРелизы.Услуга,
		|		itilprofРелизы.Актив,
		|		itilprofРелизы.ПроцессУправления,
		|		itilprofРелизы.Статус,
		|		itilprofРелизы.ОценкаПроцесса,
		|		itilprofРелизы.ТекущийЭтап,
		|		itilprofРелизы.ОрганизацияКлиент КАК ОрганизацияКлиент,
		|		itilprofРелизы.Описание КАК Описание
		|	ИЗ
		|		Документ.itilprofРелизы КАК itilprofРелизы
		|	ГДЕ
		|		itilprofРелизы.ПометкаУдаления = ЛОЖЬ
		|		И itilprofРелизы.ДатаСоздания " + Знак + " &ДатаОкончания) КАК Процессы
		|{ГДЕ
		|	Процессы.Наименование,
		|	Процессы.Ссылка.*,
		|	Процессы.Номер,
		|	Процессы.Инициатор.*,
		|	Процессы.ТекущийИсполнитель.*,
		|	Процессы.Услуга.*,
		|	Процессы.ПроцессУправления.*,
		|	(ВЫБОР
		|			КОГДА Процессы.Актив ССЫЛКА Справочник.itilprofАктивы
		|				ТОГДА Процессы.Актив.КонфигурационнаяЕдиница
		|			ИНАЧЕ Процессы.Актив
		|		КОНЕЦ).* КАК КонфигурационнаяЕдиница,
		|	Процессы.Статус.*,
		|	Процессы.Описание.*}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата" + СортировкаДаты;
		ЗапросКБазе.Текст =Текст;  
		//Дата1=Дата('20190108182009');
		Дата2= ДатаПо;
		//ЗапросКБазе.УстановитьПараметр("ДатаНачала", Дата1);
		ЗапросКБазе.УстановитьПараметр("ДатаОкончания", Дата2);
		Пользователь= ПользователиКлиентСервер.ТекущийПользователь();
		ЗапросКБазе.УстановитьПараметр("Пользователь",Пользователь);
	Результат = ЗапросКБазе.Выполнить().Выбрать();
	Обращения = Новый Массив;
	Пока Результат.Следующий() Цикл 
		ОбъектJSON = Новый Структура();
		ОбъектJSON.Вставить("itil_id", СокрЛП(Строка(Результат.Номер)));
		ОбъектJSON.Вставить("date", Число(Формат(УниверсальноеВремя(Результат.Дата, ПолучитьЧасовойПоясИнформационнойБазы()) - дата(1970,1,1,0,0,0), "ЧГ=0")));		
		ОбъектJSON.Вставить("name", Результат.Наименование);
		ОбъектJSON.Вставить("initiator", Строка(Результат.Инициатор));
		ОбъектJSON.Вставить("performer", Строка(Результат.ТекущийИсполнитель));
		ОбъектJSON.Вставить("service", Строка(Результат.Услуга));
		ОбъектJSON.Вставить("type", ПолучитьИндексПроцессаУправления(Строка(Результат.ПроцессУправления)) );
		ОбъектJSON.Вставить("status", ПолучитьИндексСтатуса(Строка(Результат.Статус)));
		ОбъектJSON.Вставить("asset", Строка(Результат.Актив));		
		ОбъектJSON.Вставить("stage", Строка(Результат.ТекущийЭтап));
		ОбъектJSON.Вставить("company", Строка(Результат.ОрганизацияКлиент));
		//Комментарий
		СсылкаОбъект=Результат.Ссылка;
		Описание=Результат.Описание;
		ФД = Новый ФорматированныйДокумент();
		ВложенияПереписки = СсылкаОбъект.ВложенияHTML.Получить();
		
		Если ВложенияПереписки = Неопределено Тогда                      
			ВложенияПереписки = Новый Структура();                       
		КонецЕсли;
		
		ФД.УстановитьHTML(Описание, ВложенияПереписки);          
		лКомментарийТекст = ФД.ПолучитьТекст();
		резКомментарийТекст = "";
		лЧисло = СтрЧислоСтрок(лКомментарийТекст);
		Для Сч = 1 По лЧисло  Цикл
			Стр = СтрЗаменить( СокрЛП( СтрПолучитьСтроку(лКомментарийТекст, Сч)) , "  "," ");
			Если НЕ ПустаяСтрока(Стр) Тогда
				резКомментарийТекст = резКомментарийТекст + Стр + ?(Сч=лЧисло,"", Символы.ПС);
			КонецЕсли;
		КонецЦикла;
		ОбъектJSON.Вставить("desc_text", резКомментарийТекст);
		//Комментарий
		НомерПодтверждения = МассивНомеровПодтверждений.Найти(Результат.Номер);
		НомерСогласования = МассивНомеровСогласований.Найти(Результат.Номер);
		
		Если ЗначениеЗаполнено(НомерПодтверждения) Тогда
			Если Пользователь=Результат.Инициатор Тогда
				ОбъектJSON.Вставить("need_action_status", 1);
			Иначе 
				ОбъектJSON.Вставить("need_action_status", 0);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НомерСогласования) Тогда
				ОбъектJSON.Вставить("need_action_status", 2);			
			Иначе
				ОбъектJSON.Вставить("need_action_status", 0);     
			КонецЕсли;
		КонецЕсли;
		
		Обращения.Добавить(ОбъектJSON);
	КонецЦикла;
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Обращения);
	Тело = ЗаписьJSON.Закрыть();
	Возврат Тело;	
КонецФункции

Функция create_appeal_PUT(Запрос)
	Token=Запрос.Заголовки.Получить("token");
	Action="base";
	СвязьСЛ=БР_ОбменСерверЛицензирования.ПолученияДанныхСЛ(Token,Action);
	Если СвязьСЛ=Истина Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку("UTF-8");
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		СтруктураНовогоОбращения = Новый Структура;
		СтруктураНовогоОбращения = ПрочитатьJSON(ЧтениеJSON);
		
		ВидПроцесса = Число(СтруктураНовогоОбращения.type);
		Тема = СтруктураНовогоОбращения.name; 
		Описание = СтруктураНовогоОбращения.desc_text;
		
		НомерОбращения=СоздатьОбращение(Тема,Описание,ВидПроцесса);
		Если Не НомерОбращения="Неопределено" Тогда 
			МассивОтвет =  Новый Массив;
			МассивОтвет.Добавить(Строка(НомерОбращения));
			ЗаписьJSON = Новый ЗаписьJSON;
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			ЗаписатьJSON(ЗаписьJSON, МассивОтвет);
			Тело = ЗаписьJSON.Закрыть();		
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(Тело, КодировкаТекста.UTF8);
		Иначе
			Ответ = Новый HTTPСервисОтвет(500);
		КонецЕсли;
		Возврат Ответ;
	Иначе
		Возврат БР_ОбменСерверЛицензирования.Ответ(СвязьСЛ);
	КонецЕсли;
КонецФункции

//+Создание обращения
Функция СоздатьОбращение(Тема,Описание,ВидПроцесса)
	Попытка
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	БР_НастройкиМобильноеПриложение.МаршрутЗапроса,
		|	БР_НастройкиМобильноеПриложение.МаршрутИнцидента,
		|	БР_НастройкиМобильноеПриложение.УслугаПоУмолчанию,
		|	БР_НастройкиМобильноеПриложение.РегистрацияПослеСоздания
		|ИЗ
		|	РегистрСведений.БР_НастройкиМобильноеПриложение КАК БР_НастройкиМобильноеПриложение";
		НастройкиКлиента=Запрос.Выполнить().Выгрузить();
		Если ВидПроцесса=0 Тогда
			ТекОбращение=Документы.itilprofЗапросы.СоздатьДокумент();
			ТекОбращение.ПроцессУправления=Перечисления.itilprofПроцессыУправления.УправлениеЗапросами;
			ТекОбращение.Маршрут=НастройкиКлиента[0].МаршрутЗапроса;
		ИначеЕсли ВидПроцесса=1 Тогда
			ТекОбращение=Документы.itilprofИнциденты.СоздатьДокумент();
			ТекОбращение.ПроцессУправления=Перечисления.itilprofПроцессыУправления.УправлениеИнцидентами;
			ТекОбращение.Маршрут=НастройкиКлиента[0].МаршрутИнцидента;
		КонецЕсли;
		ТекОбращение.Наименование=Тема;
		ТекОбращение.Описание=Описание;
		ТекОбращение.Влияние=Перечисления.itilprofВлияние.Низкое;
		ТекОбращение.Срочность=Перечисления.itilprofСрочность.Низкая;
		Инд = Перечисления.itilprofСрочность.Индекс(ТекОбращение.Срочность) + Перечисления.itilprofВлияние.Индекс(ТекОбращение.Влияние);
		ТекОбращение.Приоритет = Перечисления.itilprofПриоритеты[Инд];
		Инициатор=ПользователиКлиентСервер.ТекущийПользователь();
		ТекОбращение.Инициатор=Инициатор;
		ТекОбращение.Аналитика1=Инициатор.Аналитика1;
		ТекОбращение.Аналитика2=Инициатор.Аналитика2;
		ТекОбращение.Аналитика3=Инициатор.Аналитика3;
		ТекОбращение.Аналитика4=Инициатор.Аналитика4;
		ТекОбращение.Аналитика5=Инициатор.Аналитика5;
		ТекОбращение.Аналитика6=Инициатор.Аналитика6;
		ТекОбращение.Аналитика7=Инициатор.Аналитика7;
		ТекОбращение.Аналитика8=Инициатор.Аналитика8;
		ТекОбращение.Дата=ТекущаяДата();
		ТекОбращение.ДатаСоздания=ТекущаяДата();
		ТекОбращение.Организация=ТекОбращение.Маршрут.Организация;
		ТекОбращение.ОрганизацияКлиент=Инициатор.Организация;
		ТекОбращение.Статус=Перечисления.itilprofСтатусыПроцессов.Черновик;
		ТекОбращение.Услуга=НастройкиКлиента[0].УслугаПоУмолчанию;
		ТекОбращение.Записать();
		НеобходимаРегистрация=НастройкиКлиента[0].РегистрацияПослеСоздания;
		Если  НеобходимаРегистрация=Истина Тогда
			ЕстьИсполнитель = Неопределено;
			itilprofПроцессыСервер.ЗапуститьПроцесс(ТекОбращение, "", ЕстьИсполнитель, Истина);		
			ТекОбращение.Записать();
		КонецЕсли;
		Возврат СокрЛП(ТекОбращение.Номер);
	Исключение
		Возврат Строка("Неопределено")
	КонецПопытки;
КонецФункции
//-Создание обращения
